//  【C++11 标准新特性】
//  【右值引用和转移语义】
// https://www.ibm.com/developerworks/cn/aix/library/1307_lisl_c11/index.html

/*
右值引用是C++新标准中引入的新特性，它实现了转移语义（Move Sementics）和精确传递（Perfect Forwading)。它的主要目的有两个方面：
1 消除两个对象交互时不必要的对象拷贝，节省运算存储资源，提高效率
2 能够更简洁明确的定义泛型函数
*/

【左值与右值的定义】
/*
C++中所有的表达式和变量要么是左值，要么是右值。通俗的左值的定义就是非临时对象，那些可以再多条语句中使用的对象。所有的变量都满足这个定义，在多条代码中都可以使用，都是左值。右值是指临时对象，他们在当前的语句中有效。
*/
// 简单的赋值语句
int i = 0;
// 在上面这条语赋值句中，i是左值，0是临时值，就是右值。在以后的代码中，i可以被引用，0就不可以了。立即数都是右值。

// 右值也可以出现在赋值表达式的左边，但是不能作为赋值的对象，因为右值只在当前语句有效，赋值没有意义：如下
((i>0)?i:j) = 1;
// 在这个例子中，0作为右值出现在了“=”的左边。但是赋值对象是i或j，都是左值。

// 在c++11之前，右值是不能被引用的，最大限度就是用常量引用绑定一个右值，如：
const int &a = 1;
// 在这种情况下，右值不能被修改的。但是实际上右值是可以被修改的，如：
T().set().get();

/*
T是一个类，set是一个函数为T中的一个变量赋值，get用来取出这个变量的值。在这句话中，T()生成一个临时对象，就是右值，set()修改了变量的值，也就是修改了这个右值。

既然右值可以被修改，那么就可以实现右值的引用。右值引用能够方便的解决实际工程中的问题，实现非常有吸引力的解决方案。
*/

// 【左值和右值的语法符号】
// 【左值的声明符号为“&”，为了和左值区分，右值的声明符号为“&&” 】
void process_value(int& i) { 
 std::cout << "LValue processed: " << i << std::endl; 
} 
 
void process_value(int&& i) { 
 std::cout << "RValue processed: " << i << std::endl; 
} 
 
int main() { 
 int a = 0; 
 process_value(a);    //LValue processed: 0
 process_value(1);    //RValue processed: 1
}

/*
Process_value函数被重载，分别接受左值和右值。有输出结果可看出，临时对象是作为右值处理的。
*/

/*
但是如果临时对象通过一个接受右值的函数传递给另一个函数时，就会变成左值，因为这个临时对象在传递过程中，变成了命名对象。
*/
void process_value(int& i) { 
 std::cout << "LValue processed: " << i << std::endl; 
} 
 
void process_value(int&& i) { 
 std::cout << "RValue processed: " << i << std::endl; 
} 
 
void forward_value(int&& i) { 
 process_value(i); 
} 
 
int main() { 
 int a = 0; 
 process_value(a);  // LValue processed: 0
 process_value(1);  // RValue processed: 1
 forward_value(2);  // LValue processed: 2
}
// 虽然2这个立即数在函数forward_value接收时是右值，但到了provess_value接受时，就变成了左值。


【转移语义的定义】
/*
右值引用是用来支持转移语义的。转移语义可以将资源（堆，系统对象等）从一个对象转移到另一个对象，这样能够减少不必要的临时对象的创建、拷贝以及销毁，能够大幅度提高C++应用程序的性能。临时对象的维护（创建和销毁）对性能有严重影响
*/
/*
转移语义是和拷贝语义相对的，可以类比文件的剪切与拷贝，当我们将文件从一个目录拷贝到另一个目录时，速度比剪切慢很多。

通过转移语义，临时对象中的资源能够转移到其他的对象里。

在现有的C++机制中，我们可以定义拷贝构造函数和赋值函数。要实现转移语义，需要定义【转移构造函数】，还可以定义【转移赋值操作符】。对应右值的拷贝和赋值会调用【转移构造函数和转移赋值操作符】。如果转移构造函数和转移拷贝操作符没有定义，那么就遵循现有的机制，拷贝构造函数和赋值操作符会被调用。

普通的函数和操作符也可以利用右值引用操作符实现转移语义
*/

【实现转移构造函数和转移赋值函数】
// 以一个简单的string类为示例，实现拷贝构造函数和拷贝赋值操作符
class MyString{
private:
	char* _data;
	size_t _len;
	void _init_data(const char *s){
		_data = new char[_len+1];
		memcpy(_data,s,_len);
		_data[_len]='\0';
	}
	
pubic:
	MyString(){
		_data = NULL;
		_len = 0;
	}
	
	MyString(const char* p){
		_len = strlen(p);
		_init_data(p);
	}
	
	MyString(const MyString& str){
		_len = str._len;
		_init_data(str._data);
		std::cout<<"Copy Constructor is Called! Source: "<<str._data<<std::endl;
	}
	
	MyString& operator=(const MyString& str){
		if(this ~= &str){
			_len = str._len;
			_init_data(str._data);
		}
		str::cout<<"Copy Assignment is called! Source: "<<str._data<<std::endl;
		return *this;
	}
	
	virtual ~MyString(){
		if(_data) 
			free(_data);
	}	
};
int main(){
	MyString a;
	a = MyString("Hello");
	std::vertor<MyString> vec;
	vec.push_back(MyString("World"));
}
/*
这个string类，在main函数中，实现了调用拷贝构造函数的操作和拷贝赋值操作符的操作。【“MyString(“Hello”)和MyString("World“)都是临时对象，也是右值】。

虽然他们是临时的，但是程序仍然调用了拷贝构造和拷贝赋值，造成了没有意义的资源申请和释放的操作。

【如果能够直接使用临时对象已经申请的资源，技能节省资源，也能有节省资源申请和释放的时间。这正是定义转移语义的目的】。
*/
// 定义转移构造函数
MyString（MyString&& str）{
	std::cout<<Move Constructor is Called ! Source : "<< str._data<<std::endl;
	_len = str._len;
	_data = str._data;
	str._len = 0;
	str._data = NULL;
}
/*
转移构造函数和拷贝构造函数类似，但是有几点需要注意：
1. 参数（右值）的符号必须是右值引用符号，即“&&”；
2. 参数（右值）不可以是常量，因为我们需要修改右值；
3. 参数（右值）的资源链接和标记必须修改。否则，右值的析构函数就会释放资源。转移到新对象的资源也就无效了。
*/

// 定义转移赋值操作符
MyString& operator=(MyString&& str){
	std::cout<<"Move Assignment is Called! Sou : "<<str._data<<std::endl;
	if(this != &str){
		_len = str._len;
		_data = str._data;
		str._len = 0;
		str._data = NULL;
	}
	return *this;
}

// 转移赋值函数需要注意的问题与转移构造函数是一样的。

/*
由此可以看出，编译器区分了左值和右值，对右值调用了转移构造函数和转移赋值操作符。节省了资源，提高了程序运行的效率。

有了右值引用和转移语义，我们在设计和实现类时，对于需要动态申请大量资源的类，应该设计转移构造函数和转移赋值函数，以提高应用程序的效率。
*/

【标准库函数 std::move】
/*
既然编译器值对右值引用才调用转移构造函数和转移赋值函数，而所有命名对象都只能是左值引用，如果已知一个命名对象不在被使用而想对它调用转移构造函数和转移赋值函数，也就是把一个左值引用当做右值引用来使用，该怎么做呢？

标准库提供了函数 std::move，这个函数以非常简单的方式将左值引用转换为右值引用。
*/
void ProcessValue(int& i ){
	std::cout<<"LValue processed: "<< i << std::endl;
}
void ProcessValue(int&& i){
	std::cout<<" RValue processed: "<< i <<std::endl;
}
int main()
{
	int a = 0;
	ProcessValue(a);             // LValue Processed: 0
	ProcessValue(std::move(a));  // RValue Processed: 0
}

// std:move在提高swap函数的性能上非常有帮助，一般来说，swap函数的通用定义如下：
template<class T> swap(T& a, T& b)
{
	T tmp(a);   // copy a to tmp
	a = b;      // copy b to a
	b = tmp;	// copy tmp to b
}
// 在有了std::move，swap函数的定义变为：
template<class T> swap(T&a ,T& b)
{
	T tmp(std::move(a));	// move a to tmp
	a = std::move(b);		// move b to a
	b = std::move(tmp);		// move tmp to b
}
/*
通过std::move，一个简单的swap函数就避免了3词不必要的拷贝操作
*/


【精确传递】
/*
精确传递，“Perfect Forwarding”也被翻译成完美转发，精准转发等，说的都是一个意思。

精确传递适用于这样的场景：需要将一组参数原封不动的传递给另一个函数。

“原封不动”不仅仅是参数的值不变，在C++中，处理参数值之外，还有以下两组属性：
左值/右值 和 const/non-const。精确传递就是在参数的换地过程中，所有这些属性和参数值都不能改变。在泛型函数中，这样的需求非常普遍。
*/

// 举例说明：函数forward_value是一个泛型函数，它将一个参数传递给另一个函数process_value:
// forward_value的定义为：
template<typename T> void forward_value(const T& val){
	process_value(val);
}
template<typename T> void forward_value(T& val){
	process_value(val);
}
// 函数forward_value为每一个参数必须重载两种类型，T& 和 const T&, 否则，下面四中类型参数的调用中就不能同时满足：
int a = 0;
const int &b = 1;
forward_value(a);   // int&
forward_value(b);   // const int&
forward_value(2);   // int&
/*
对于一个参数就要重载两次，也就是函数重载的次数和参数的个数是一个正比的关系。这个函数的定义是非常低效的。

对于右值引用的解决方法是：
*/
template <typename T> void forward_value(T&& val){
	process_value(val);
}
/*
只需要定义一次，接受一个右值引用的参数，就能将所有的参数类型原封不动的传递给目标函数。四种不同类型参数的调用都能满足，参数的左右值属性和const/non-const属性完全传递给目标函数process_value。
*/
int a = 0; 
const int &b = 1; 
forward_value(a); // int& 
forward_value(b); // const int& 
forward_value(2); // int&&

// C++11中定义的T&&的推导规则为：
/*
右值实参为右值引用，左值实参仍然为左值引用。

一句话就是：参数的属性不变。这样就完美的实现了参数的完整传递。

右值引用，表面上看只是增加了一个引用符号，但是他对C++软件设计和类库的设计有非常大的影响。它既能简化代码，又能提高程序运行效率。

我们在设计类的时候如果有动态申请的资源，也应该设计转移构造函数和转移拷贝函数。在设计类库时，还应该考虑【std::move】的使用场景，并积极使用它
*/



// 以上摘自 https://www.ibm.com/developerworks/cn/aix/library/1307_lisl_c11/index.html


// ... 未完待续
















































































































































