//  C++ lambda学习
/*
C++11中的lambda表达式用于定义并创建匿名的函数对象，以简化编程工作
利用lambda表达式可以编写内嵌的匿名函数，用以替换独立函数或者函数对象，并且使代码更可读。但是从本质上来讲，lambda表达式只是一种语法糖，因为所有其能完成的工作都可以用其他稍微复杂的代码来实现。

从广义上来说，lambda表达式产生的是函数对象。在类中，可以重载函数调用运算符（），此时类的对象可以将具有类似函数的行为，称这些对象为函数对象或者仿函数。


lambda语法形式如下：
[函数对象参数] （操作符重载函数参数） mutable或exception声明 ->返回值类型 {函数体}

【语法分析】
1 函数对象参数：   【可以为空，不可以省略】
表示一个Lambda表达式的开始，这部分必须存在，不能省略。函数对象参数是传递给编译器自动生成的函数对象类的构造函数。函数对象参数只能使用那些到定义Lambda为止时Lambda所在作用范围内课件的局部变量（包括Lambda所在类的this）。
函数对象参数有一下形式：
a) 空：没有任何函数对象参数

b) =：函数体内可以使用Lambda所在范围内所有可见的局部变量（包括Lambda所在类的this）,并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）

c) &: 函数体内可以使用Lambda所在范围内所有可见的局部变量（包括Lambda所在类的this），并且是引用传递方式（相当于编译器自动为我们按引用传递了所有局部变量）

d) this： 函数体内可以使用Lambda所在类中的成员变量

e) a: 将a按值进行传递。按值进行传递时，函数体内不能修改传递进来的a的拷贝。因为默认情况下函数时const的，要修改传递进来的拷贝，可以添加mutable修饰符

f) &a:将a按引用传递

g) a,&b: 将a按值传递，b按引用进行传递

h) =,&a,&b: 除a和b按引用进行传递外，其他参数都按值进行传递

i) &,a,b: 除a和b按值进行传递外，其他参数都按引用进行传递

2 操作符重载函数参数   【可以省略】 （类似于使用函数时的形参）
表示重载的()操作符的参数，没有参数时，这部分可以省略。参数可以通过按值（如：(a,b)）和按引用两种方式进行传递（如:(&a,&b)）

3 mutable或exception声明   【不可以省略】
这部分可以省略。按值传递函数对象参数时，加上mutable修饰符后，可以修改传递进来的拷贝（注意是能修改拷贝，而不是值本身）。exception声明用于指定函数抛出的异常，如果抛出整数类型的异常，可以使用throw(int)。
 
4 ->返回值类型   【可以省略】
表示函数返回值的类型，当返回值为void时，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值的类型）时，这部分可以省略

5 {函数体}      【不可以省略】
标识函数的实现，这部分不能省略，但函数体可以为空
*/

//【示例】
[] (int x , int y) {return x+y;}    // 隐式返回类型
[] (int& x){++x;}    // 没有return 语句，返回值为void类型
[] () {++global_x;}  // 没有参数，仅访问某个全局变量

/*
Lambda函数可以引用在他之外声明的变量，这些变量的集合叫做一个闭包。闭包被定义在lambda表达式生命中的方括号[]内。这个机制允许这些变量被按值或按引用捕获。
*/
[]		// 未定义变量，任何试图在Lambda内使用的外部变量都是错误的
[x,&y]		// x按值捕获，y按引用捕获
[&]		// 用到的任何外部变量都隐式按引用捕获
[=]		// 用到的任何外部变量都隐式按值捕获
[&,x]		// x显示按值捕获，其他变量被引用捕获
[=,&z]		// z被引用捕获，其他变量按值捕获

/*
【Test】
vecto<int> some_list
int total = 0;
int value = 5;
for_each(begin(some_list),end(some_list),[&,value,this](int x)
{
	total+=x*value*this->some_func();
});
此例中total会存为引用，value会存一份拷贝。对this的捕获比较特殊，它只能按值捕获。this只有当包含它的最靠近他的函数不是静态成员函数时才能捕获。对protect和private成员来说，这个Lambda函数与创建它的成员函数有相同的访问控制。如果this被捕获了，不管是显示还是隐式的，那么它的类的作用域对Lambda函数就是可见的。访问this的成员不必使用this->语法，可以直接访问。


不同编译器的具体实现可以有所不同，但期望的结果是，按引用捕获的任何变量，Lambda函数实际存储的应该是这些变量在创建这个Lambda函数的函数的栈指针，而不是Lambda函数本身栈变量的引用。因为大多数Lambda函数都很小，且在局部作用中，与候选的内联函数很类似，所以按引用捕获的那些变量不需要额外的存储空间。

如果一个闭包含有局部变量的引用，在超出创建它的作用域之外的地方呗使用的话，这种行为是未定义的。

Lambda函数是一个依赖于实现的函数对象类型，这个类型的名字只有编译器知道。如果用户想把Lambda函数式作为一个参数来传递，那么形参的类型必须是模板类型或者必须能创建一个function类似的对象去捕获Lambda函数。使用 auto 关键字可以帮助存储 lambda函数。 如下程序：
*/
#include<functional>
#include<vector>
#include<iostream>
using namespace std;
double eval(function<double(double)> f, double x = 2.0){return f(x);}
int main()
{
	function<double(double)> f0 = [](double x){return 1;};
	auto f1 = [](double x){return x;};
	decltype(f0) fa[3] = {f0,f1,[](double x){return x*x;}};     // decltype有些类似于auto的反函数，auto可以让人声明一个变量，而decltye则可以从一个变量或表达式中得到类型
	vector<decltype(f0)> fv = {f0,f1};
	fv.push_back( [](double x){return x*x;} );
	for(int i=0;i<fv.size();i++)
		cout<<fv[i](2.0)<<endl;
	for(int i=0;i<3;i++)
		cout<<fa[i](2.0)<<endl;
	for(auto &f:fv)
		cout<<f(2.0)<<endl;
	for(auto &f:fa)
		cout<<f(2.0)<<endl;
	
	cout<<eval(f0)<<endl;
	cout<<eval(f1)<<endl;
	return 0;
}
//【decltype 说明符】
/*
decltype类型说明符生成指定表达式的类型。在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。
语法为： decltype(expression)
编译器使用下列规则来确定expression参数的类型。
1 如果expression参数是标识符或类成员访问，则decltype（expression）是expression命名的实体的类型。如果不存在此类实体或expression参数命名一组重载函数，则编译器将生成醋五哦消息。

2 如果expression参数是对一个函数或一个重载运算符函数的调用，则decltype(expression)是函数的返回类型，将忽略重载运算符两边的括号

3 如果expression参数是右值，则declrype(expression)是expression类型。如果expression参数是左值，则decltype(expression)是对左值引用类型的expression。



*/
// 【function 模板类】
/*
function是模板类：模板参数：返回值类型+函数参数类型列表；例如std::function<int(int,int)> f, f可以指向任意一个返回值为int，参数为两个int类型的函数。
*/


// https://www.jianshu.com/p/d686ad9de817
/*
利用lambda表达式可以编写内嵌的匿名函数，用以替换独立函数或者函数对象，并且使代码更可读。但是从本质上来讲，lambda表达式只是一种语法糖，因为所有其能完成的工作都可以用其他稍微复杂的代码来实现。但是它的简单却给C++带来了深远的影响。从广义上来说，lambda表达式产生的是函数对象。在类中，可以重载函数调用运算符（），此时类的对象可以将具有类似函数的行为，我们这些对象为函数对象或者仿函数。相比lambda表达式，函数对象有自己独特的优势。

lambda表达式的大致原理：
每当定义一个lambda表达式后，编译器会自动生成一个匿名类（这个类当然重载了()运算符），我们成为闭包类型（closure type）。那么在运行时，这个lambda表达式就会返回一个匿名的闭包实例，其实一个右值。【闭包的一个强大之处是其可以通过传值或者引用的方式捕捉其封装作用域内的变量，我们称之为lambda捕捉块】。

当lambda捕捉块为空时，表示没有捕捉任何变量。同时lambda还可以以复制，或者引用的方式捕捉作用域内的变量。对于复制传值捕捉方式，类中会相应添加对应类型的非静态数据成员。在运行时，会用复制的值初始化这些成员变量，从而产生闭包。闭包类也实现了函数调用运算符的重载，这意味着lambda表达式无法修改通过复制形式捕捉的变量，因为函数调用运算符的重载方法是const属性的。【有时候，如果想改动传值方式捕获的值，那么要使用mutable，因为一旦将lambda表达式标记为mutable，那么实现的函数调用运算符是非const属性的】；对于引用捕获方式，无论是否标记mutable，都可以在lambda表达式中修改捕获的值。至于闭包类中是否有对应的成员，C++标准中给出的答案是：不清楚的。

注意lambda表达式是不能被赋值的：如下：
*/
auto a = []{cout<<"A"<<endl;}；
auto b = []{cout<<"B"<<endl;}；
a=b; // 非法的，lambda无法赋值
auto c = a ; // 合法，生成一个副本
/*
a 与 b不能相互赋值，是因为【禁用了赋值操作符】，但是【没有禁用复制构造函数】，所以仍然可以用一个lambda表达式去初始化另外一个lambda表达式而产生副本。并且lambda表达式也可以赋值给相应的函数指针，这也使得完全可以把lambda表达式看成对应函数类型的指针。
*/

/*
捕获的方式可以是引用也可以是复制，但是具体说会有以下几种情况来捕获其所在作用域中的变量
[]：	 默认不捕获任何变量；
[=]：	 默认以值捕获所有变量；
[&]：	 默认以引用捕获所有变量；
[x]：	 仅以值捕获x，其它变量不捕获；
[&x]：   仅以引用捕获x，其它变量不捕获；
[=, &x]：默认以值捕获所有变量，但是x是例外，通过引用捕获；
[&, x] ：默认以引用捕获所有变量，但是x是例外，通过值捕获；
[this]： 通过引用捕获当前对象（其实是复制指针）；
[*this]：通过传值方式捕获当前对象；

*/
/*
在上面的捕获方式中，注意最好不要使用[=] [&]默认捕获所有变量。
默认引用捕获所有变量，很有可能会出现悬挂引用，因为引用捕获不会掩藏引用的变量的声明周期。
*/
function<int(int)> add_x(int x)
{
	return [&](int a){return x+a;};
}
/*
因为参数x仅仅是一个临时变量，函数调用后就会被销毁，但是返回的lambda表达式却引用了该变量，但调用这个表达式时，引用的是一个垃圾值，所以会产生没有意义的结果。
使用默认传值方式可以避免悬挂引用问题，但是采用默认值捕获所有变量仍然有风险。
*/
class Filter
{
public:
	Filter(int divisoral):
		divisor{divisorVal}
	{}
	
	std::function<bool(int)> getFilter()
	{
		return [=](int value){return value%divisor==0;};
	}
private:
	int divisor;
}
/*
这个类中有一个成员方法，可以返回一个lambda表达式，这个表达式使用了类的数据成员divisior。而且采用默认值方式捕捉所有变量。你可能认为这个lambda表达式也捕捉了divisor的一份副本，但是实际上大错特错。因为数据成员divisor对lambda表达式并不可见，

因为每个非静态方法都有一个this指针变量，利用this指针，可以接近任何成员变量，所以lambda表达式实际上捕捉的是this指针的副本。
所以原来的代码等价于：
*/
std::function<bool(int)> getFilter()
{
	return [this](int value){return value%this->divisor == 0;};
}
/*
尽管还是以值方式捕捉，但是捕获的是指针，其实相当于以引用的方式捕获了当前类对象，所以lambda表达式的闭包与一个类对象绑定在一起了，这也很危险，因为仍然有可能在类对象析构后使用这个lambda表达式，那么类似“悬挂引用”的问题也会产生。所以采用默认值捕捉所有变量仍然是不安全的，主要是由于指针变量的复制，实际上还是按引用传值。
*/

/*
lambda表达式可以作为返回值。lambda表达式可以赋值给对应类型的函数指针。但是使用函数指针貌似并不是那么方便。所以STL定义在<functional>头文件提供了一个多态的函数对象封装std::function，其类似于函数指针，【它可以绑定任何类函数对象】，只要参数与返回类型相同。如下面的返回一个bool且接收两个int的函数包装器：
*/
std::function<bool(int,int)> wrapper = [](int x,int y){return x<y};


/*
而lambda表达式一个更重要的应用是其可以用于函数的参数，通过这种方式可以实现回调函数。其实，最常用的是STL算法中，比如要统计一个数组中满足特定条件的元素数据量，通过lambda表达式给出条件，传递给count_if函数：
*/
int value = 3;
vector<int> v{1,3,5,2,6,10};
int count = std::count_if(v.begin(),v.end(),[value](int x){return x>value;})


/*
再比如，想生成斐波那切数列，然后保存在数组中，此时可以使用generate函数，并辅助lambda表达式：
*/
vector<int> v(10);
int a=0;
int b=1;
std::generate(v.begin(),v.end(),[&a,&b]{int value = b; b = b + a; a = value; return value;});
// 此时 v{1,1,2,3,5,8,13,21,34,55}

// 此外，lambda表达式还用于对象的排序准则：
class Person
{
public:
	Person(const string& first, const string& last):
		firstName{first},lastName{last}
	{}
	
	Person() = default;
	
	string first() const{return firstName;}
	string last() const{return lastName;}
	
private:
	string firstName;
	string lastName;
	
};
int main()
{
	vector<Person> vp;
	// ...添加Person信息
	
	// 按照姓名排序
	std::sort(vp.begin(),vp.end(),[](const Person& p1, const person&p2)
	{return p1.last() < p2.last() || (p1.last() == p2.last() && p1.first() < p2.first()); });
	
	// ...
	return 0;
	
}
/*
以上，对于大部分STL算大，可以非常灵活的搭配lambda表达式来实现想要的效果。
*/











































































































